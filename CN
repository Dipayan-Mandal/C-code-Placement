CALCULATOR



class server
{
    public static void main(String args[]) throws IOException
    {
        ServerSocket ss = new ServerSocket(3333);
        Socket s = ss.accept();
        DataInputStream dis = new DataInputStream(s.getInputStream());
        DataOutputStream dout = new DataOutputStream(s.getOutputStream());
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = 0, m = 0;
        boolean flg = true;
        while (flg)
        {
            String ch = dis.readUTF();
            String a = dis.readUTF();
            String b = dis.readUTF();
            switch (ch.charAt(0))
            {
                case '1':
                    n = Integer.parseInt(a);
                    m = Integer.parseInt(b);
                    System.out.println("Addition = " + (n + m));
                    break;
                case '2':
                    n = Integer.parseInt(a);
                    m = Integer.parseInt(b);
                    System.out.println("Subtraction = " + (n - m));
                    break;
                case '3':
                    n = Integer.parseInt(a);
                    m = Integer.parseInt(b);
                    System.out.println("Multiplication = " + (n * m));
                    break;
                case '4':
                    n = Integer.parseInt(a);
                    m = Integer.parseInt(b);
                    System.out.println("Division = " + (n / m));
                    break;
                case '0':
                    flg = false;
                    break;
            }
            dout.writeUTF(ch);
            dout.flush();
        }
        dis.close();
        s.close();
        ss.close();
    }
}







import java.net.*;
import java.io.*;
class client
{
    public static void main(String args[]) throws IOException
    {
        Socket s = new Socket("localhost", 3333);
        DataInputStream dis = new DataInputStream(s.getInputStream());
        DataOutputStream dout = new DataOutputStream(s.getOutputStream());
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        boolean flg = true;
        while (flg)
        {
            System.out.println("Enter two numbers: - ");
            int a = Integer.parseInt(br.readLine());
            int b = Integer.parseInt(br.readLine());
            System.out.println("Enter 1 : Addition");
            System.out.println("Enter 2 : Subtraction");
            System.out.println("Enter 3 : Multiplication");
            System.out.println("Enter 4 : Division");
            System.out.println("Enter 5 : EXIT");
            System.out.println("Enter your choice");
            int ch = Integer.parseInt(br.readLine());
            if (ch >= 0 && ch <= 4)
            {
                if (ch == 0)
                {
                    dout.writeUTF(Integer.toString(ch));
                    dout.writeUTF(Integer.toString(a));
                    dout.writeUTF(Integer.toString(b));
                    dout.flush();
                    flg = false;
                }
                else
                {
                    dout.writeUTF(Integer.toString(ch));
                    dout.writeUTF(Integer.toString(a));
                    dout.writeUTF(Integer.toString(b));
                    dout.flush();
                }
            }
            else
            {
                System.out.println("Wrong Choice");
            }
            ch = Integer.parseInt(dis.readUTF());
        }
        dout.close();
        s.close();
    }
}



********************************PURE ALOHA AND SLOTTED ALOHA********************************



DataFrames Class
This class simulates the behavior of nodes in a network using either the Pure Aloha or Slotted Aloha protocol.


import java.util.Random;

class DataFrames {
    private static final Random random = new Random();
    private double frameTime;

    public DataFrames(double frameTime) {
        this.frameTime = frameTime;
    }

    // Pure ALOHA: Next possible transmission time
    public double getNextPureAloha(double currentTime) {
        return currentTime + random.nextDouble() * frameTime;
    }

    // Slotted ALOHA: Next slot number to attempt transmission
    public int getNextSlottedAloha(int currentSlot) {
        return currentSlot + 1 + random.nextInt(10);  // Random backoff of up to 10 slots
    }
}




import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class AlohaSimulation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Choose protocol to simulate:\n1. Pure Aloha\n2. Slotted Aloha");
        int choice = scanner.nextInt();
        System.out.print("Enter the number of nodes: ");
        int numberOfNodes = scanner.nextInt();
        System.out.print("Enter the frame time (seconds, e.g., 1.0): ");
        double frameTime = scanner.nextDouble();
        if (choice == 1) {
            System.out.print("Enter the total simulation time (seconds, e.g., 10.0): ");
            double simulationTime = scanner.nextDouble();
            simulatePureAloha(numberOfNodes, frameTime, simulationTime);
        } else if (choice == 2) {
            System.out.print("Enter the number of slots for the simulation: ");
            int totalSlots = scanner.nextInt();
            simulateSlottedAloha(numberOfNodes, frameTime, totalSlots);
        } else {
            System.out.println("Invalid choice.");
        }
        scanner.close();
    }

    private static void simulatePureAloha(int numberOfNodes, double frameTime, double simulationTime) {
        List<DataFrames> nodes = new ArrayList<>();
        double[] nextTransmissions = new double[numberOfNodes];
        for (int i = 0; i < numberOfNodes; i++) {
            nodes.add(new DataFrames(frameTime));
            nextTransmissions[i] = nodes.get(i).getNextPureAloha(0);
        }
        double currentTime = 0;
        int totalTransmissions = 0, totalCollisions = 0;
        while (currentTime < simulationTime) {
            double minTime = Double.MAX_VALUE;
            for (double time : nextTransmissions) {
                if (time < minTime) minTime = time;
            }
            int transmissionsAtMinTime = 0;
            for (int i = 0; i < numberOfNodes; i++) {
                if (Math.abs(nextTransmissions[i] - minTime) < 0.00001) {
                    transmissionsAtMinTime++;
                    nextTransmissions[i] = nodes.get(i).getNextPureAloha(minTime);
                }
            }
            if (transmissionsAtMinTime > 1) {
                totalCollisions++;
                System.out.println("Collision occurred at time " + minTime);
            }
            totalTransmissions += transmissionsAtMinTime;
            currentTime = minTime;
        }
        System.out.println("Total transmissions: " + totalTransmissions);
        System.out.println("Total collisions: " + totalCollisions);
    }

    private static void simulateSlottedAloha(int numberOfNodes, double slotTime, int totalSlots) {
        List<DataFrames> nodes = new ArrayList<>();
        int[] nextTransmissions = new int[numberOfNodes];
        for (int i = 0; i < numberOfNodes; i++) {
            nodes.add(new DataFrames(slotTime));
            nextTransmissions[i] = nodes.get(i).getNextSlottedAloha(-1);
        }
        int totalTransmissions = 0, totalCollisions = 0;
        for (int currentSlot = 0; currentSlot < totalSlots; currentSlot++) {
            int transmissionsInSlot = 0;
            // Count how many nodes attempt to transmit in this slot
            for (int i = 0; i < numberOfNodes; i++) {
                if (nextTransmissions[i] == currentSlot) {
                    transmissionsInSlot++;
                    // Schedule next transmission for this node
                    nextTransmissions[i] = nodes.get(i).getNextSlottedAloha(currentSlot);
                }
            }
            // Check for collisions
            if (transmissionsInSlot > 1) {
                totalCollisions++;
                System.out.println("Collision occurred in slot " + currentSlot);
            } else if (transmissionsInSlot == 1) {
                totalTransmissions++;
            }
        }
        // Print out results of the simulation
        System.out.println("Total successful transmissions: " + totalTransmissions);
        System.out.println("Total collisions: " + totalCollisions);
    }
}







********************************PURE ALOHA AND SLOTTED ALOHA********************************
import java.util.Random;
import java.util.Scanner;

class PureAloha {
    Random rand = new Random();
    int timeframelength = 100;

    void simulate(int packetlength, int numpacket) {
        int timeframe[] = new int[timeframelength];
        int collision = 0;
        for (int i = 0; i < numpacket; i++) {
            int r = rand.nextInt(timeframelength - packetlength);
            boolean k = true;
            for (int j = 0; j < packetlength; j++) {
                if (timeframe[r + j] != 0 && k) {
                    collision++;
                    k = false;
                }
                timeframe[r + j] = 1;
            }
            System.out.println("Packet sent at:" + r + (k ? "" : "---->collision"));
        }
        System.out.println("No of collisions in Pure Aloha: " + collision);
    }
}

class SlottedAloha {
    Random rand = new Random();
    int timeframelength = 100;
    int timeslotlength = 5;

    void simulation(int packetlength, int numpacket) {
        int timeframe[] = new int[timeframelength];
        int collision = 0;
        for (int i = 0; i < numpacket; i++) {
            int r = rand.nextInt(timeframelength / timeslotlength) * timeslotlength;
            boolean k = true;
            if (timeframe[r] != 0) {
                collision++;
                k = false;
            }
            timeframe[r] = 1;
            System.out.println("Packet sent at:" + r + (k ? "" : "---->collision"));
        }
        System.out.println("No of collisions in Slotted Aloha: " + collision);
    }
}

public class Main {
    public static void main(String args[]) {
        int packetlength = 5;
        System.out.println("Enter the number of packets:");
        Scanner sc = new Scanner(System.in);
        int numpacket = sc.nextInt();
        PureAloha pa = new PureAloha();
        SlottedAloha sa = new SlottedAloha();
        System.out.println("Pure Aloha");
        pa.simulate(packetlength, numpacket);
        System.out.println("Slotted Aloha");
        sa.simulation(packetlength, numpacket);
    }
}



********************************DNS********************************

import java.io.*;
import java.net.*;
import java.util.*;

public class DNS
{
    public static void main(String args[])
    {
        int n;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        Scanner sc = new Scanner(System.in);
        System.out.println("\n Menu: \n 1.DNS \n 2.Reverse DNS\n");
        
        n = Integer.parseInt(sc.nextLine());
        switch(n)
        {
            case 1:
                try
                {
                    System.out.println("Enter hostname:\n");
                    String hname = in.readLine();
                    InetAddress address = InetAddress.getByName(hname);
                    System.out.println("Host Name: " + address.getHostName());
                    System.out.println("IP: " + address.getHostAddress());
                }
                catch(IOException ioe)
                {
                    ioe.printStackTrace();
                }
                break;
                
            case 2:
                try
                {
                    System.out.println("Enter IP address:\n");
                    String ip = in.readLine();
                    InetAddress ia = InetAddress.getByName(ip);
                    System.out.println("IP: " + ip);
                    System.out.println("Host Name: " + ia.getHostName());
                }
                catch(IOException ioe)
                {
                    ioe.printStackTrace();
                }
                break;
                
            default:
                System.out.println("Wrong choice!");
                break;
        }
    }
}



********************************REVERSE STRING********************************


import java.net.*;
import java.io.*;

class Myserver {
    public static void main(String args[]) throws IOException {
        ServerSocket SS = new ServerSocket(3333); // Create a server socket bound to port 3333
        Socket S = SS.accept(); // Wait for a client to connect
        DataInputStream dis = new DataInputStream(S.getInputStream()); // Input stream to receive data from the client
        DataOutputStream dout = new DataOutputStream(S.getOutputStream()); // Output stream to send data to the client
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // Reader to read input from the console

        String str = " ";
        while (!str.equals("stop")) { // Loop until the received string is "stop"
            dout.writeUTF("Send String"); // Prompt the client to send a string
            dout.flush();
            System.out.println("waiting for String");
            str = dis.readUTF(); // Read the string sent by the client
            for (int i = str.length() - 1; i >= 0; i--) { // Reverse the string
                System.out.println((char) str.charAt(i));
            }
            System.out.println();
            System.out.println(dis.readUTF()); // Read and print the response from the client
            dout.writeUTF(br.readLine()); // Read the server's response from the console and send it to the client
            dout.flush();
        }
        dis.close(); // Close the input stream
        S.close(); // Close the client socket
        SS.close(); // Close the server socket
    }
}




import java.net.*;
import java.io.*;

class Myclient {
    public static void main(String args[]) throws IOException {
        Socket S = new Socket("localhost", 3333); // Connect to the server running on localhost at port 3333
        DataInputStream dis = new DataInputStream(S.getInputStream()); // Input stream to receive data from the server
        DataOutputStream dout = new DataOutputStream(S.getOutputStream()); // Output stream to send data to the server
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // Reader to read input from the console

        String str = " ";
        while (!str.equals("stop")) { // Loop until the sent string is "stop"
            System.out.println(dis.readUTF()); // Read and print the prompt from the server
            dout.writeUTF(br.readLine()); // Read the client's response from the console and send it to the server
            dout.flush();
            dout.writeUTF("Send String"); // Send the string "Send String" to the server
            dout.flush();
            System.out.println("waiting for String");
            str = dis.readUTF(); // Read the string sent by the server
            for (int i = str.length() - 1; i >= 0; i--) { // Reverse the string
                System.out.println((char) str.charAt(i));
            }
            System.out.println();
        }
        dout.close(); // Close the output stream
        S.close(); // Close the socket connection to the server
    }
}




********************************2 WAY COMMUNICATION********************************


import java.net.*;
import java.io.*;

class Myserver {
    public static void main(String args[]) throws IOException {
        // Create a server socket bound to port 3333
        ServerSocket SS = new ServerSocket(3333);
        // Wait for a client to connect
        Socket S = SS.accept();
        // Create input stream to receive data from the client
        DataInputStream din = new DataInputStream(S.getInputStream());
        // Create output stream to send data to the client
        DataOutputStream dout = new DataOutputStream(S.getOutputStream());
        // Create a reader to read input from the server's console
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String str = " ", str2 = " ";
        // Loop until the received string is "stop"
        while (!str.equals("stop")) {
            // Read the string sent by the client
            str = din.readUTF();
            System.out.println("client says: " + str);
            // Read the server's response from the console
            str2 = br.readLine();
            // Send the server's response to the client
            dout.writeUTF(str2);
            // Ensure the message is sent immediately
            dout.flush();
        }
        
        // Close the input stream, client socket, and server socket
        din.close();
        S.close();
        SS.close();
    }
}


import java.net.*;
import java.io.*;

class Myclient {
    public static void main(String args[]) throws IOException {
        // Connect to the server running on localhost at port 3333
        Socket S = new Socket("localhost", 3333);
        // Create input stream to receive data from the server
        DataInputStream din = new DataInputStream(S.getInputStream());
        // Create output stream to send data to the server
        DataOutputStream dout = new DataOutputStream(S.getOutputStream());
        // Create a reader to read input from the client's console
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String str = " ", str2 = " ";
        // Loop until the sent string is "stop"
        while (!str.equals("stop")) {
            // Read the client's input from the console
            str = br.readLine();
            // Send the client's input to the server
            dout.writeUTF(str);
            // Ensure the message is sent immediately
            dout.flush();
            // Read the server's response and print it
            str2 = din.readUTF();
            System.out.println("server says: " + str2);
        }
        
        // Close the input stream and the socket connection to the server
        din.close();
        S.close();
    }
}


********************************STOP AND WAIT ARQ*********************************


import java.io.*;
import java.net.*;

public class Sender {
    Socket sender;
    ObjectOutputStream out = null;
    ObjectInputStream in = null;
    String packet, ack, str, msg;
    int n, i = 0, sequence = 0;
    String recseq = null;

    Sender() {}

    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            System.out.println("waiting for connection");
            sender = new Socket("localhost", 2004);
            sequence = 0;
            out = new ObjectOutputStream(sender.getOutputStream());
            out.flush();
            in = new ObjectInputStream(sender.getInputStream());
            str = (String) in.readObject();
            System.out.println("Receiver >" + str);
            System.out.println("Enter the data to be sent");
            packet = br.readLine();
            n = packet.length();

            do {
                try {
                    if (i < n) {
                        msg = String.valueOf(sequence);
                        msg = msg.concat(packet.substring(i, i + 1));
                    } else if (i == n) {
                        msg = "end";
                        out.writeObject(msg);
                        break;
                    }
                    out.writeObject(msg);
                    sequence = (sequence == 0) ? 1 : 0;
                    out.flush();
                    System.out.println("data sent >" + msg);
                    Thread.sleep(3000);
                    System.out.println("Time out resending data...\n\n");
                    System.out.println("data sent >" + msg);

                    try {
                        sender.setSoTimeout(1000);
                        ack = (String) in.readObject();
                    } catch (Exception e) {
                        System.out.println("Exception in getting ack");
                    }
                    System.out.println("Waiting for ack...\n\n");

                    if (ack != null) {
                        recseq = String.valueOf(sequence);
                    } else {
                        recseq = "1";
                    }

                    if (ack.equals(recseq)) {
                        i++;
                        System.out.println("Receiver >" + packet + " received\n\n");
                    } else {
                        System.out.println("Time out resending data...\n\n");
                        sequence = (sequence == 0) ? 1 : 0;
                    }
                } catch (Exception e) {}
            } while (i < n + 1);

            System.out.println("All data sent, exiting.");
        } catch (Exception e) {} finally {
            try {
                in.close();
                out.close();
                sender.close();
            } catch (Exception e) {}
        }
    }

    public static void main(String args[]) {
        Sender S = new Sender();
        S.run();
    }
}





import java.io.*;
import java.net.*;

public class Receiver {
    ServerSocket receiver;
    Socket connection = null;
    ObjectOutputStream out;
    ObjectInputStream in;
    String packet, ack, data = " ";
    int i = 0, sequence = 0;

    Receiver() {}

    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            receiver = new ServerSocket(2004, 10);
            System.out.println("Waiting for Connection");
            connection = receiver.accept();
            sequence = 0;
            System.out.println("Connection Established");
            out = new ObjectOutputStream(connection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(connection.getInputStream());
            out.writeObject("Connected");

            do {
                try {
                    packet = (String) in.readObject();
                    if (Integer.valueOf(packet.substring(0, 1)) == sequence) {
                        data += packet.substring(1);
                        sequence = (sequence == 0) ? 1 : 0;
                        System.out.println("\n\nReceiver >" + packet);
                    } else {
                        System.out.println("\n\nReceiver >" + packet + " Duplicate Data");
                    }
                    Thread.sleep(2000);
                    out.writeObject(String.valueOf(sequence));
                } catch (Exception e) {}
            } while (!packet.equals("end"));

            System.out.println("Data received = " + data);
            out.writeObject("Connection ended");
        } catch (Exception e) {} finally {
            try {
                in.close();
                out.close();
                receiver.close();
            } catch (Exception e) {}
        }
    }

    public static void main(String[] args) {
        Receiver S = new Receiver();
        S.run();
    }
}
